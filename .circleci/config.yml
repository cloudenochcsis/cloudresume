version: 2.1

orbs:
  node: circleci/node@5.0.2
  python: circleci/python@2.1

jobs:
  build-and-test-frontend:
    docker:
      - image: cimg/node:16.20
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yarn install
      - run:
          name: Check versions
          command: |
            node --version
            npm --version
            yarn --version
      - run:
          name: Run linter
          command: yarn run eslint .
      - run:
          name: Run tests
          command: yarn test --passWithNoTests
      - run:
          name: Build application
          command: yarn build
      - persist_to_workspace:
          root: .
          paths:
            - build

  build-and-test-backend:
    docker:
      - image: cimg/python:3.11
      - image: mongo:6.0
    steps:
      - checkout
      - run:
          name: Install Python dependencies
          command: |
            pip install pytest pytest-cov
            pip install -r api/requirements.txt
      - run:
          name: Run backend tests
          command: cd api && pytest
      - persist_to_workspace:
          root: .
          paths:
            - api

  deploy:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - attach_workspace:
          at: .
      - add_ssh_keys:
          fingerprints:
            - "IrFlIKv6KdHjCdm+FroGYwh1FpSvaUDozW+QbOoZRfk"
      - run:
          name: Deploy Frontend to DigitalOcean
          command: |
            ssh -o StrictHostKeyChecking=no root@${DROPLET_IP} 'rm -rf /var/www/portfolio/*'
            scp -r build/* root@${DROPLET_IP}:/var/www/portfolio/
      - run:
          name: Deploy Backend to DigitalOcean
          command: |
            # Ensure Python 3 and pip3 are installed on the server
            ssh -o StrictHostKeyChecking=no root@${DROPLET_IP} 'apt-get update && apt-get install -y python3 python3-pip python3-venv python3-full'
            
            # Create app directory if it doesn't exist
            ssh -o StrictHostKeyChecking=no root@${DROPLET_IP} 'mkdir -p /opt/resume-api'
            # Copy API files
            scp -r api/* root@${DROPLET_IP}:/opt/resume-api/
            # Copy .env file for API
            scp api/.env root@${DROPLET_IP}:/opt/resume-api/.env || echo "No .env file found, will use environment variables"
            # Create and setup virtual environment
            ssh -o StrictHostKeyChecking=no root@${DROPLET_IP} '
              cd /opt/resume-api && \
              python3 -m venv venv && \
              . venv/bin/activate && \
              pip install -r requirements.txt
            '
            # Create or update systemd service file
            scp .circleci/resume-api.service root@${DROPLET_IP}:/tmp/resume-api.service
            ssh -o StrictHostKeyChecking=no root@${DROPLET_IP} "sed 's|__MONGODB_URI__|${MONGODB_URI}|g' /tmp/resume-api.service > /etc/systemd/system/resume-api.service"
            # Reload systemd and start the service
            ssh -o StrictHostKeyChecking=no root@${DROPLET_IP} 'systemctl daemon-reload && systemctl enable resume-api && systemctl restart resume-api'
            
            # Check Nginx configuration and service status before reloading
            ssh -o StrictHostKeyChecking=no root@${DROPLET_IP} 'nginx -t && systemctl status nginx'
            
            # Attempt to reload Nginx (continue on error)
            ssh -o StrictHostKeyChecking=no root@${DROPLET_IP} 'systemctl reload nginx || echo "Nginx reload failed, trying to restart" && systemctl restart nginx || echo "Nginx restart also failed, checking configuration"'
            
            # Output diagnostic information if Nginx fails
            ssh -o StrictHostKeyChecking=no root@${DROPLET_IP} '
              if ! systemctl is-active --quiet nginx; then
                echo "\nNginx service is not running. Here is the status:"
                systemctl status nginx
                echo "\nHere are the last 20 lines of the Nginx error log:"
                tail -n 20 /var/log/nginx/error.log
                echo "\nChecking configuration files:"
                ls -la /etc/nginx/sites-enabled/
                cat /etc/nginx/sites-available/cloudenoch.com
              else
                echo "Nginx is running successfully"
              fi
            '

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build-and-test-frontend
      - build-and-test-backend
      - deploy:
          requires:
            - build-and-test-frontend
            - build-and-test-backend
          filters:
            branches:
              only: main