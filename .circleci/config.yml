version: 2.1

orbs:
  node: circleci/node@5.0.2
  python: circleci/python@2.1
  docker: circleci/docker@2.1.1

jobs:
  build-and-test:
    docker:
      - image: cimg/node:16.20
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: yarn
      - run:
          name: Check versions
          command: |
            node --version
            npm --version
            yarn --version
      - run:
          name: Run linter
          command: yarn run eslint .
      - run:
          name: Run tests
          command: yarn test --passWithNoTests
      - run:
          name: Build application
          command: yarn build
      - persist_to_workspace:
          root: .
          paths:
            - build

  build-and-push-images:
    docker:
      - image: cimg/python:3.10.13
    steps:
      - checkout
      - setup_remote_docker
      - docker/build:
          image: $DOCKER_IMAGE_FRONTEND
          path: .
          tag: latest
      - docker/build:
          image: $DOCKER_IMAGE_API
          path: ./api
          tag: latest
      - docker/push:
          image: $DOCKER_IMAGE_FRONTEND
          tag: latest
      - docker/push:
          image: $DOCKER_IMAGE_API
          tag: latest

  deploy:
    docker:
      - image: cimg/base:stable
    steps:
      - add_ssh_keys:
          fingerprints:
            - "IrFlIKv6KdHjCdm+FroGYwh1FpSvaUDozW+QbOoZRfk"
      - checkout
      - run:
          name: Install Docker on Server
          command: |
            ssh -o StrictHostKeyChecking=no root@${DROPLET_IP} '
              if ! command -v docker &> /dev/null; then
                echo "Installing Docker..."
                curl -fsSL https://get.docker.com -o get-docker.sh
                sh get-docker.sh
                rm get-docker.sh
              fi

              if ! command -v docker-compose &> /dev/null; then
                echo "Installing Docker Compose..."
                curl -L "https://github.com/docker/compose/releases/download/v2.17.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                chmod +x /usr/local/bin/docker-compose
              fi
            '

      - run:
          name: Deploy to DigitalOcean
          command: |
            # Create deployment script
            echo '#!/bin/bash' > deploy.sh
            echo 'set -e' >> deploy.sh
            echo 'echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin' >> deploy.sh
            echo 'docker pull $DOCKER_IMAGE_FRONTEND:latest' >> deploy.sh
            echo 'docker pull $DOCKER_IMAGE_API:latest' >> deploy.sh
            echo 'mkdir -p /root/api' >> deploy.sh
            echo 'echo "$MONGODB_URI" > /root/api/.env' >> deploy.sh
            
            # Create docker-compose override file
            echo 'version: "3.8"' > docker-compose.override.yml
            echo 'services:' >> docker-compose.override.yml
            echo '  frontend:' >> docker-compose.override.yml
            echo '    environment:' >> docker-compose.override.yml
            echo '      - REACT_APP_COUNTER_API_URL=https://api.cloudenoch.com/api/counter' >> docker-compose.override.yml
            echo '    image: ${DOCKER_IMAGE_FRONTEND}:latest' >> docker-compose.override.yml
            echo '  api:' >> docker-compose.override.yml
            echo '    environment:' >> docker-compose.override.yml
            echo '      - MONGODB_URI=${MONGODB_URI}' >> docker-compose.override.yml
            echo '    image: ${DOCKER_IMAGE_API}:latest' >> docker-compose.override.yml
            
            # Add container management commands
            echo 'docker-compose down' >> deploy.sh
            echo 'docker-compose -f docker-compose.yml -f docker-compose.override.yml up -d' >> deploy.sh

            # Ensure remote directories exist
            ssh -o StrictHostKeyChecking=no root@${DROPLET_IP} 'mkdir -p /root/api'

            # Copy deployment files
            scp -o StrictHostKeyChecking=no deploy.sh docker-compose.yml docker-compose.override.yml nginx.prod.conf root@${DROPLET_IP}:/root/
            
            # Copy nginx configuration
            ssh -o StrictHostKeyChecking=no root@${DROPLET_IP} 'cp /root/nginx.prod.conf /etc/nginx/sites-available/docker-apps.conf'
            ssh -o StrictHostKeyChecking=no root@${DROPLET_IP} 'ln -sf /etc/nginx/sites-available/docker-apps.conf /etc/nginx/sites-enabled/'
            ssh -o StrictHostKeyChecking=no root@${DROPLET_IP} 'nginx -t && systemctl reload nginx'
            
            # Execute deployment
            ssh -o StrictHostKeyChecking=no root@${DROPLET_IP} 'chmod +x /root/deploy.sh && /root/deploy.sh'

  test-api:
    docker:
      - image: cimg/python:3.10.13
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          args: -r requirements.txt
          app-dir: ./api
      - run:
          name: Run API tests
          command: |
            cd api
            echo "MONGODB_URI=$MONGODB_URI" > .env
            python -m pytest

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build-and-test
      - test-api
      - build-and-push-images:
          requires:
            - build-and-test
            - test-api
          filters:
            branches:
              only: main
      - deploy:
          requires:
            - build-and-push-images
          filters:
            branches:
              only: main