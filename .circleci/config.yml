version: 2.1

orbs:
  node: circleci/node@5.0.2
  python: circleci/python@2.1
  docker: circleci/docker@2.1.1

docker-auth: &docker-auth
  username: $DOCKERHUB_USERNAME
  password: $DOCKERHUB_PASSWORD

jobs:
  deployment:
    docker:
      - image: cimg/base:stable
    environment:
      DOCKER_IMAGE_FRONTEND: akpadetsi/cloudresume-frontend
      DOCKER_IMAGE_API: akpadetsi/cloudresume-api
      MONGODB_URI: ${MONGODB_URI}
    steps:
      - add_ssh_keys:
          fingerprints:
            - "IrFlIKv6KdHjCdm+FroGYwh1FpSvaUDozW+QbOoZRfk"
      - checkout
      - run:
          name: Install Docker on Server
          command: |
            ssh -o StrictHostKeyChecking=no root@${DROPLET_IP} '
              if ! command -v docker &> /dev/null; then
                echo "Installing Docker..."
                curl -fsSL https://get.docker.com -o get-docker.sh
                sh get-docker.sh
                rm get-docker.sh
              fi

              if ! command -v docker-compose &> /dev/null; then
                echo "Installing Docker Compose..."
                curl -L "https://github.com/docker/compose/releases/download/v2.17.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                chmod +x /usr/local/bin/docker-compose
              fi
            '

      - run:
          name: Deploy to DigitalOcean
          command: |
            # Create deployment script
            cat > deploy.sh << 'EOF'
            #!/bin/bash
            set -e

            # Docker login
            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

            # Pull images
            docker pull "${DOCKER_IMAGE_FRONTEND}:latest"
            docker pull "${DOCKER_IMAGE_API}:latest"

            # Setup directories
            mkdir -p /root/api
            chmod 755 /root/api

            # Create docker-compose override file
            cat > /root/docker-compose.override.yml << EOL
            version: "3"
            services:
              frontend:
                image: ${DOCKER_IMAGE_FRONTEND}:latest
              api:
                environment:
                  - MONGODB_URI=${MONGODB_URI}
                image: ${DOCKER_IMAGE_API}:latest
            EOL

            # Create .env file
            echo "MONGODB_URI=${MONGODB_URI}" > /root/api/.env
            chmod 644 /root/api/.env

            # Stop existing containers
            cd /root && docker-compose down || true

            # Start new containers
            cd /root && docker-compose -f docker-compose.yml -f docker-compose.override.yml up -d
            EOF

            chmod +x deploy.sh

            # Ensure remote directories exist
            ssh -o StrictHostKeyChecking=no root@${DROPLET_IP} 'mkdir -p /root/api'

            # Copy deployment files
            scp -o StrictHostKeyChecking=no deploy.sh docker-compose.yml nginx.prod.conf root@${DROPLET_IP}:/root/

            # Execute deployment
            ssh -o StrictHostKeyChecking=no root@${DROPLET_IP} '
                echo "Starting deployment process..." && \
                /root/deploy.sh && \
                echo "Deployment script completed"
            '

            # Wait for containers to be ready
            ssh -o StrictHostKeyChecking=no root@${DROPLET_IP} '
              echo "Waiting for containers to be ready..."
              for i in {1..60}; do
                if docker compose ps | grep -q "Up" && curl -s http://localhost:8000/health >/dev/null; then
                  echo "\nContainers are ready"
                  break
                fi
                if [ $i -eq 60 ]; then
                  echo "\nTimeout waiting for containers"
                  docker compose logs
                  exit 1
                fi
                echo -n "."
                sleep 2
              done
            '

            # Copy and verify nginx configuration
            ssh -o StrictHostKeyChecking=no root@${DROPLET_IP} '
              cp /root/nginx.prod.conf /etc/nginx/sites-available/docker-apps.conf && \
              ln -sf /etc/nginx/sites-available/docker-apps.conf /etc/nginx/sites-enabled/ && \
              rm -f /etc/nginx/sites-enabled/default && \
              nginx -t && \
              systemctl reload nginx
            '

workflows:
  version: 2
  build-deploy:
    jobs:
      - deployment:
          filters:
            branches:
              only: main
