version: 2.1

orbs:
  node: circleci/node@5.0.2
  python: circleci/python@2.1

jobs:
  build-and-test-frontend:
    docker:
      - image: cimg/node:16.20
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yarn install
      - run:
          name: Check versions
          command: |
            node --version
            npm --version
            yarn --version
      - run:
          name: Run linter
          command: yarn run eslint .
      - run:
          name: Run tests
          command: yarn test --passWithNoTests
      - run:
          name: Build application
          command: yarn build
      - persist_to_workspace:
          root: .
          paths:
            - build

  build-and-test-backend:
    docker:
      - image: cimg/python:3.11
      - image: mongo:6.0
    steps:
      - checkout
      - run:
          name: Install Python dependencies
          command: |
            pip install pytest pytest-cov
            pip install -r api/requirements.txt
      - run:
          name: Run backend tests
          command: cd api && pytest
      - persist_to_workspace:
          root: .
          paths:
            - api

  deploy:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - attach_workspace:
          at: .
      - add_ssh_keys:
          fingerprints:
            - "IrFlIKv6KdHjCdm+FroGYwh1FpSvaUDozW+QbOoZRfk"
      - run:
          name: Deploy Frontend to DigitalOcean
          command: |
            ssh -o StrictHostKeyChecking=no root@${DROPLET_IP} 'rm -rf /var/www/portfolio/*'
            scp -r build/* root@${DROPLET_IP}:/var/www/portfolio/
      - run:
          name: Deploy Backend to DigitalOcean
          command: |
            # Ensure Python 3 and pip3 are installed on the server
            ssh -o StrictHostKeyChecking=no root@${DROPLET_IP} 'apt-get update && apt-get install -y python3 python3-pip python3-venv python3-full'
            
            # Create app directory if it doesn't exist
            ssh -o StrictHostKeyChecking=no root@${DROPLET_IP} 'mkdir -p /opt/resume-api'
            # Copy API files
            scp -r api/* root@${DROPLET_IP}:/opt/resume-api/
            # Copy .env file for API
            scp api/.env root@${DROPLET_IP}:/opt/resume-api/.env || echo "No .env file found, will use environment variables"
            # Create and setup virtual environment
            ssh -o StrictHostKeyChecking=no root@${DROPLET_IP} '
              cd /opt/resume-api && \
              python3 -m venv venv && \
              . venv/bin/activate && \
              pip install -r requirements.txt
            '
            # Create or update systemd service file
            scp .circleci/resume-api.service root@${DROPLET_IP}:/tmp/resume-api.service
            # Use awk for MongoDB URI replacement with proper quote handling
            ssh -o StrictHostKeyChecking=no root@${DROPLET_IP} '
              export MONGODB_URI_VAR="'"${MONGODB_URI}"'" && \
              awk '\''{gsub(/__MONGODB_URI__/, ENVIRON["MONGODB_URI_VAR"])}1'\'' /tmp/resume-api.service | sudo tee /etc/systemd/system/resume-api.service > /dev/null
            '
            # Reload systemd and start the service
            ssh -o StrictHostKeyChecking=no root@${DROPLET_IP} 'systemctl daemon-reload && systemctl enable resume-api && systemctl restart resume-api'
            
            # Check Nginx configuration and ensure it's correctly set up for the API
            ssh -o StrictHostKeyChecking=no root@${DROPLET_IP} '
              echo "Current Nginx config files:" 
              ls -la /etc/nginx/sites-enabled/
              
              # Check and display the current cloudenoch.com configuration
              echo "\nCurrent cloudenoch.com Nginx configuration:"
              cat /etc/nginx/sites-available/cloudenoch.com
              
              # Check if the API location block exists and points to the correct port (3000)
              if ! grep -q "location /api" /etc/nginx/sites-available/cloudenoch.com; then
                echo "\nAPI location block not found in Nginx config, adding it..."
                # Make a backup first
                cp /etc/nginx/sites-available/cloudenoch.com /etc/nginx/sites-available/cloudenoch.com.bak
                
                # Add the API location block to the configuration (inside both server blocks if they exist)
                sed -i "/location \/ {/i\\n    location \/api\/ {\n        proxy_pass http:\/\/localhost:3000\/;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade \$http_upgrade;\n        proxy_set_header Connection \'upgrade\';\n        proxy_set_header Host \$host;\n        proxy_cache_bypass \$http_upgrade;\n    }\n" /etc/nginx/sites-available/cloudenoch.com
                
                echo "Added API location block to Nginx configuration"
              elif grep -q "proxy_pass http://api:" /etc/nginx/sites-available/cloudenoch.com; then
                echo "\nFound Docker reference in API location block, updating to use localhost:3000..."
                cp /etc/nginx/sites-available/cloudenoch.com /etc/nginx/sites-available/cloudenoch.com.bak
                sed -i "s/proxy_pass http:\/\/api:[0-9]\+/proxy_pass http:\/\/localhost:3000/g" /etc/nginx/sites-available/cloudenoch.com
                echo "Updated cloudenoch.com to use localhost instead of Docker service name"
              elif ! grep -q "proxy_pass http://localhost:3000" /etc/nginx/sites-available/cloudenoch.com; then
                echo "\nAPI location block found but points to wrong port, updating to port 3000..."
                cp /etc/nginx/sites-available/cloudenoch.com /etc/nginx/sites-available/cloudenoch.com.bak
                sed -i "s/proxy_pass http:\/\/localhost:[0-9]\+/proxy_pass http:\/\/localhost:3000/g" /etc/nginx/sites-available/cloudenoch.com
                echo "Updated API location block to use port 3000"
              else
                echo "\nNginx configuration looks correct, API location block properly configured."
              fi
            '
            
            # Test Nginx configuration
            ssh -o StrictHostKeyChecking=no root@${DROPLET_IP} 'nginx -t || echo "Nginx configuration test failed"'
            
            # Attempt to reload Nginx (continue on error)
            ssh -o StrictHostKeyChecking=no root@${DROPLET_IP} 'systemctl reload nginx || echo "Nginx reload failed, trying to restart" && systemctl restart nginx || echo "Nginx restart also failed, checking configuration"'
            
            # Output diagnostic information if Nginx fails
            ssh -o StrictHostKeyChecking=no root@${DROPLET_IP} '
              if ! systemctl is-active --quiet nginx; then
                echo "\nNginx service is not running. Here is the status:"
                systemctl status nginx
                echo "\nHere are the last 20 lines of the Nginx error log:"
                tail -n 20 /var/log/nginx/error.log
                echo "\nChecking configuration files:"
                ls -la /etc/nginx/sites-enabled/
                cat /etc/nginx/sites-available/cloudenoch.com
              else
                echo "Nginx is running successfully"
              fi
            '

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build-and-test-frontend
      - build-and-test-backend
      - deploy:
          requires:
            - build-and-test-frontend
            - build-and-test-backend
          filters:
            branches:
              only: main