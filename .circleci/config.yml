version: 2.1

orbs:
  node: circleci/node@5.0.2
  python: circleci/python@2.1

jobs:
  build-and-test-frontend:
    docker:
      - image: cimg/node:16.20
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: yarn
      - run:
          name: Check versions
          command: |
            node --version
            npm --version
            yarn --version
      - run:
          name: Run linter
          command: yarn run eslint .
      - run:
          name: Run tests
          command: yarn test --passWithNoTests
      - run:
          name: Build application
          command: yarn build
      - persist_to_workspace:
          root: .
          paths:
            - build

  build-and-test-backend:
    docker:
      - image: cimg/python:3.11
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          packages:
            - pytest
            - pytest-cov
      - run:
          name: Install backend dependencies
          command: pip install -r api/requirements.txt
      - run:
          name: Run backend tests
          command: cd api && pytest
      - persist_to_workspace:
          root: .
          paths:
            - api

  deploy:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - attach_workspace:
          at: .
      - add_ssh_keys:
          fingerprints:
            - "IrFlIKv6KdHjCdm+FroGYwh1FpSvaUDozW+QbOoZRfk"
      - run:
          name: Deploy Frontend to DigitalOcean
          command: |
            ssh -o StrictHostKeyChecking=no root@${DROPLET_IP} 'rm -rf /var/www/portfolio/*'
            scp -r build/* root@${DROPLET_IP}:/var/www/portfolio/
      - run:
          name: Deploy Backend to DigitalOcean
          command: |
            # Create app directory if it doesn't exist
            ssh -o StrictHostKeyChecking=no root@${DROPLET_IP} 'mkdir -p /opt/resume-api'
            # Copy API files
            scp -r api/* root@${DROPLET_IP}:/opt/resume-api/
            # Copy .env file for API
            scp api/.env root@${DROPLET_IP}:/opt/resume-api/.env || echo "No .env file found, will use environment variables"
            # Install dependencies
            ssh -o StrictHostKeyChecking=no root@${DROPLET_IP} 'cd /opt/resume-api && pip3 install -r requirements.txt'
            # Create or update systemd service file
            ssh -o StrictHostKeyChecking=no root@${DROPLET_IP} "cat > /etc/systemd/system/resume-api.service << 'EOT'
[Unit]
Description=Resume API Service
After=network.target

[Service]
User=root
WorkingDirectory=/opt/resume-api
ExecStart=/usr/bin/python3 -m uvicorn main:app --host 0.0.0.0 --port 3000
Restart=always
Environment=\"MONGODB_URI=${MONGODB_URI}\"

[Install]
WantedBy=multi-user.target
EOT"
            # Reload systemd, enable and restart the service
            ssh -o StrictHostKeyChecking=no root@${DROPLET_IP} 'systemctl daemon-reload && systemctl enable resume-api && systemctl restart resume-api'
            # Reload nginx
            ssh -o StrictHostKeyChecking=no root@${DROPLET_IP} 'systemctl reload nginx'

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build-and-test-frontend
      - build-and-test-backend
      - deploy:
          requires:
            - build-and-test-frontend
            - build-and-test-backend
          filters:
            branches:
              only: main